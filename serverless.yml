# Serverless Framework Configuration
service: smithers-v2

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    MONGODB_URI: ${env:MONGODB_URI}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    HOSTAWAY_ACCOUNT_ID: ${env:HOSTAWAY_ACCOUNT_ID}
    HOSTAWAY_CLIENT_SECRET: ${env:HOSTAWAY_CLIENT_SECRET}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  
  # IAM Role Statements
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 
            - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/*:*"

# Functions
functions:
  smithers:
    handler: lambda.handler
    name: smithers-v2-${self:provider.stage}
    description: 'Smithers v2 - AI-powered customer service assistant'
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false

# Plugins
plugins:
  - serverless-offline
  - serverless-dotenv-plugin

# Custom Configuration
custom:
  serverless-offline:
    httpPort: 3001
    
# Package Configuration
package:
  exclude:
    - node_modules/**
    - .git/**
    - .env*
    - Scripts/**
    - HOSTAWAY_TESTING.md
    - README.md
    - '*.md'
  include:
    - src/**
    - lambda.js
    - server.js
    - package.json

# Resources
resources:
  Resources:
    # CloudWatch Log Group
    SmithersLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/smithers-v2-${self:provider.stage}
        RetentionInDays: 14
        
    # CloudWatch Alarms
    LambdaErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: smithers-v2-lambda-errors-${self:provider.stage}
        AlarmDescription: Lambda function errors
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: smithers-v2-${self:provider.stage}
            
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId
        
    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId