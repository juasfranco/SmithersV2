# GitHub Actions Workflow para CI/CD

name: Deploy Smithers v2 to AWS

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  NODE_VERSION: 18

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint || echo "No lint script found"
        
      - name: Run tests
        run: npm run test || echo "No test script found"

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install Serverless Framework
        run: npm install -g serverless
        
      - name: Create environment file
        run: |
          cat > .env.dev << EOF
          NODE_ENV=development
          MONGODB_URI=${{ secrets.MONGODB_URI_DEV }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          HOSTAWAY_ACCOUNT_ID=${{ secrets.HOSTAWAY_ACCOUNT_ID }}
          HOSTAWAY_CLIENT_SECRET=${{ secrets.HOSTAWAY_CLIENT_SECRET }}
          EOF
          
      - name: Deploy to development
        run: serverless deploy --stage dev --region ${{ env.AWS_REGION }}

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install Serverless Framework
        run: npm install -g serverless
        
      - name: Create environment file
        run: |
          cat > .env.staging << EOF
          NODE_ENV=staging
          MONGODB_URI=${{ secrets.MONGODB_URI_STAGING }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          HOSTAWAY_ACCOUNT_ID=${{ secrets.HOSTAWAY_ACCOUNT_ID }}
          HOSTAWAY_CLIENT_SECRET=${{ secrets.HOSTAWAY_CLIENT_SECRET }}
          EOF
          
      - name: Deploy to staging
        run: serverless deploy --stage staging --region ${{ env.AWS_REGION }}

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install Serverless Framework
        run: npm install -g serverless
        
      - name: Create environment file
        run: |
          cat > .env.prod << EOF
          NODE_ENV=production
          MONGODB_URI=${{ secrets.MONGODB_URI_PROD }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          HOSTAWAY_ACCOUNT_ID=${{ secrets.HOSTAWAY_ACCOUNT_ID }}
          HOSTAWAY_CLIENT_SECRET=${{ secrets.HOSTAWAY_CLIENT_SECRET }}
          EOF
          
      - name: Deploy to production
        run: serverless deploy --stage prod --region ${{ env.AWS_REGION }}
        
      - name: Run post-deployment tests
        run: |
          sleep 30  # Wait for deployment to be ready
          curl -f https://$(serverless info --stage prod --region ${{ env.AWS_REGION }} | grep ServiceEndpoint | awk '{print $2}' | sed 's|https://||')/health